#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the AVL tree
typedef struct Node {
    int key;
    struct Node* left;
    struct Node* right;
    int height;
} Node;

// Function to create a new node
Node* createNode(int key) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1;
    return node;
}

// Function to calculate the height of a node
int height(Node* node) {
    if (node == NULL) {
        return 0;
    }
    return node->height;
}

// Function to update the height of a node
void updateHeight(Node* node) {
    node->height = 1 + max(height(node->left), height(node->right));
}

// Function to rotate left
Node* rotateLeft(Node* node) {
    Node* temp = node->right;
    node->right = temp->left;
    temp->left = node;
    updateHeight(node);
    updateHeight(temp);
    return temp;
}

// Function to rotate right
Node* rotateRight(Node* node) {
    Node* temp = node->left;
    node->left = temp->right;
    temp->right = node;
    updateHeight(node);
    updateHeight(temp);
    return temp;
}

// Function to rebalance the tree
Node* rebalance(Node* node) {
    int balanceFactor = height(node->left) - height(node->right);
    if (balanceFactor > 1) {
        if (height(node->left->left) > height(node->left->right)) {
            node = rotateRight(node);
        } else {
            node->left = rotateLeft(node->left);
            node = rotateRight(node);
        }
    } else if (balanceFactor < -1) {
        if (height(node->right->right) > height(node->right->left)) {
            node = rotateLeft(node);
        } else {
            node->right = rotateRight(node->right);
            node = rotateLeft(node);
        }
    }
    return node;
}

// Function to insert a new node into the tree
Node* insertNode(Node* node, int key) {
    if (node == NULL) {
        return createNode(key);
    }
    if (key < node->key) {
        node->left = insertNode(node->left, key);
    } else if (key > node->key) {
        node->right = insertNode(node->right, key);
    } else {
        printf("Key already exists in the tree\n");
        return node;
    }
    updateHeight(node);
    node = rebalance(node);
    return node;
}

// Function to print the tree
void printTree(Node* node, int indent) {
    if (node == NULL) {
        return;
    }
    printTree(node->right, indent + 4);
    for (int i = 0; i < indent; i++) {
        printf(" ");
    }
    printf("%d\n", node->key);
    printTree(node->left, indent + 4);
}

int main() {
    Node* root = NULL;
    root = insertNode(root, 5);
    root = insertNode(root, 3);
    root = insertNode(root, 7);
    root = insertNode(root, 2);
    root = insertNode(root, 4);
    root = insertNode(root, 6);
    root = insertNode(root, 8);

    printf("AVL Tree:\n");
    printTree(root, 0);

    return 0;
}
