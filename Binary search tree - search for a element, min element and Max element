#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the BST
typedef struct Node {
    int key;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int key) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Function to insert a new node into the BST
Node* insertNode(Node* root, int key) {
    if (root == NULL) {
        return createNode(key);
    }
    if (key < root->key) {
        root->left = insertNode(root->left, key);
    } else if (key > root->key) {
        root->right = insertNode(root->right, key);
    }
    return root;
}

// Function to search for an element in the BST
Node* searchNode(Node* root, int key) {
    if (root == NULL || root->key == key) {
        return root;
    }
    if (key < root->key) {
        return searchNode(root->left, key);
    } else {
        return searchNode(root->right, key);
    }
}

// Function to find the minimum element in the BST
Node* findMinNode(Node* root) {
    while (root->left != NULL) {
        root = root->left;
    }
    return root;
}

// Function to find the maximum element in the BST
Node* findMaxNode(Node* root) {
    while (root->right != NULL) {
        root = root->right;
    }
    return root;
}

int main() {
    Node* root = NULL;
    root = insertNode(root, 5);
    root = insertNode(root, 3);
    root = insertNode(root, 7);
    root = insertNode(root, 2);
    root = insertNode(root, 4);
    root = insertNode(root, 6);
    root = insertNode(root, 8);

    // Search for an element
    int key = 4;
    Node* node = searchNode(root, key);
    if (node != NULL) {
        printf("Found %d in the BST\n", key);
    } else {
        printf("%d not found in the BST\n", key);
    }

    // Find the minimum element
    Node* minNode = findMinNode(root);
    printf("Minimum element: %d\n", minNode->key);

    // Find the maximum element
    Node* maxNode = findMaxNode(root);
    printf("Maximum element: %d\n", maxNode->key);

    return 0;
}
